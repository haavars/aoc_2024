# Advent of Code 2024 - Day 2

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"},
])
```

## Section

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIyIiwic2Vzc2lvbl9zZWNyZXQiOiJBT0NfU0VTU09OXzIwMjQiLCJ5ZWFyIjoiMjAyNCJ9","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "2", System.fetch_env!("LB_AOC_SESSON_2024"))
```

```elixir
defmodule Day02 do
  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn line ->
      split = String.split(line)
      Enum.map(split, fn s -> String.to_integer(s) end)
    end)
  end

  def part1(input) do
    input
    |> Enum.count(&safe?/1)
  end

  def part2() do
  end

  defp safe?([a, a | _]), do: false

  defp safe?([a, b | rest]) do
    multiplier = if b - a > 0, do: 1, else: -1
    check_trend_consistency?([a, b | rest], multiplier)
  end

  defp check_trend_consistency?([_], _), do: true

  defp check_trend_consistency?([a, b | rest], multiplier) do
    ((b - a) * multiplier) in 1..3 && check_trend_consistency?([b | rest], multiplier)
  end
end
```

```elixir
Day02.parse(puzzle_input) |> Day02.part1()
```

```elixir
Day02.parse(puzzle_input) |> Day02.part2()
```

<!-- livebook:{"offset":1275,"stamp":{"token":"XCP.I2EP30AGmqcvOAygKez8iN2zeDpD80DQNz8AZ05lFMfwgK1KJdZ8743F5JLacybzy3AO8eoyjWH6ktHz6vtVVIRUsuNHKgRLZU_sukhWmqI1n_40OQg1WnI_","version":2}} -->
