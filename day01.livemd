# Advent of Code 2024 - Day 1

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"},
])
```

## Section

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIxIiwic2Vzc2lvbl9zZWNyZXQiOiJBT0NfU0VTU09OXzIwMjQiLCJ5ZWFyIjoiMjAyNCJ9","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "1", System.fetch_env!("LB_AOC_SESSON_2024"))
```

```elixir
defmodule Day01 do
  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn line ->
      [left, right] = String.split(line)
      {String.to_integer(left), String.to_integer(right)}
    end)
    |> Enum.unzip()
  end

  def part1({left, right}) do
    Enum.zip(Enum.sort(left), Enum.sort(right))
    |> Enum.map(fn {a, b} -> abs(a - b) end)
    |> Enum.sum()
  end

  def part2({left, right}) do
    left
    |> Enum.map(fn number ->
      number * Enum.count(right, & &1 == number)
    end)
    |> Enum.sum()
  end
end

```

```elixir
Day01.parse(puzzle_input) |> Day01.part1()
```

```elixir
Day01.parse(puzzle_input) |> Day01.part2()
```
